//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for DeviceState.
const (
	BUSY         DeviceState = "BUSY"
	CONNECTING   DeviceState = "CONNECTING"
	DISCONNECTED DeviceState = "DISCONNECTED"
	OUTOFPAPER   DeviceState = "OUT_OF_PAPER"
	READY        DeviceState = "READY"
)

// DeviceInfo defines model for DeviceInfo.
type DeviceInfo struct {
	// BatteryLevel Battery level of device as a percentage
	BatteryLevel int `json:"batteryLevel"`

	// FirmwareVersion Device specific firmware version string
	FirmwareVersion string      `json:"firmwareVersion"`
	State           DeviceState `json:"state"`
}

// DeviceState defines model for DeviceState.
type DeviceState string

// Font defines model for Font.
type Font struct {
	Name string `json:"name"`
	Uuid Uuid   `json:"uuid"`
}

// ParameterValue defines model for ParameterValue.
type ParameterValue struct {
	ParameterName string `json:"parameterName"`
	Value         string `json:"value"`
}

// Position defines model for Position.
type Position struct {
	X int `json:"x"`
	Y int `json:"y"`
}

// PrintTemplateRequest defines model for PrintTemplateRequest.
type PrintTemplateRequest struct {
	ParameterValues []ParameterValue `json:"parameterValues"`
}

// Template defines model for Template.
type Template struct {
	Id         *int                 `json:"id,omitempty"`
	Images     *[]TemplateImage     `json:"images,omitempty"`
	Landscape  bool                 `json:"landscape"`
	MaxSize    int                  `json:"maxSize"`
	MinSize    int                  `json:"minSize"`
	Name       string               `json:"name"`
	Parameters *[]TemplateParameter `json:"parameters,omitempty"`
	Texts      *[]TemplateText      `json:"texts,omitempty"`
}

// TemplateImage defines model for TemplateImage.
type TemplateImage struct {
	Height int `json:"height"`

	// Image base64 image data
	Image    string   `json:"image"`
	Position Position `json:"position"`
	Width    int      `json:"width"`
}

// TemplateParameter defines model for TemplateParameter.
type TemplateParameter struct {
	MaxLength int    `json:"maxLength"`
	Name      string `json:"name"`
}

// TemplateText defines model for TemplateText.
type TemplateText struct {
	FontSize int  `json:"fontSize"`
	FontUuid Uuid `json:"fontUuid"`

	// Height The max allowed height of the text. This is required if the template is landscape (landscape = `true`)
	Height   *int     `json:"height,omitempty"`
	Position Position `json:"position"`
	Text     string   `json:"text"`

	// Width The max allowed width of the text. This is required if the template is portrait (landscape = `false`)
	Width *int `json:"width,omitempty"`
}

// Uuid defines model for Uuid.
type Uuid = string

// PrintImageJSONBody defines parameters for PrintImage.
type PrintImageJSONBody struct {
	ContentType string             `json:"contentType"`
	Data        openapi_types.File `json:"data"`
}

// PrintImageJSONRequestBody defines body for PrintImage for application/json ContentType.
type PrintImageJSONRequestBody PrintImageJSONBody

// CreateTemplateJSONRequestBody defines body for CreateTemplate for application/json ContentType.
type CreateTemplateJSONRequestBody = Template

// PrintTemplateJSONRequestBody defines body for PrintTemplate for application/json ContentType.
type PrintTemplateJSONRequestBody = PrintTemplateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List fonts
	// (GET /font)
	ListFont(w http.ResponseWriter, r *http.Request)
	// Print an image directly
	// (POST /printer)
	PrintImage(w http.ResponseWriter, r *http.Request)
	// Get device info
	// (GET /printer/info)
	GetPrinterInfo(w http.ResponseWriter, r *http.Request)
	// List templates
	// (GET /template)
	ListTemplate(w http.ResponseWriter, r *http.Request)
	// Create a new template
	// (POST /template)
	CreateTemplate(w http.ResponseWriter, r *http.Request)
	// Get a single template
	// (GET /template/{id})
	GetTemplate(w http.ResponseWriter, r *http.Request, id int)
	// Print a template
	// (POST /template/{id}/print)
	PrintTemplate(w http.ResponseWriter, r *http.Request, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListFont operation middleware
func (siw *ServerInterfaceWrapper) ListFont(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFont(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PrintImage operation middleware
func (siw *ServerInterfaceWrapper) PrintImage(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PrintImage(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPrinterInfo operation middleware
func (siw *ServerInterfaceWrapper) GetPrinterInfo(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPrinterInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTemplate operation middleware
func (siw *ServerInterfaceWrapper) ListTemplate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTemplate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTemplate operation middleware
func (siw *ServerInterfaceWrapper) CreateTemplate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTemplate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTemplate operation middleware
func (siw *ServerInterfaceWrapper) GetTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTemplate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PrintTemplate operation middleware
func (siw *ServerInterfaceWrapper) PrintTemplate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PrintTemplate(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/font", wrapper.ListFont)
	m.HandleFunc("POST "+options.BaseURL+"/printer", wrapper.PrintImage)
	m.HandleFunc("GET "+options.BaseURL+"/printer/info", wrapper.GetPrinterInfo)
	m.HandleFunc("GET "+options.BaseURL+"/template", wrapper.ListTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/template", wrapper.CreateTemplate)
	m.HandleFunc("GET "+options.BaseURL+"/template/{id}", wrapper.GetTemplate)
	m.HandleFunc("POST "+options.BaseURL+"/template/{id}/print", wrapper.PrintTemplate)

	return m
}

type ListFontRequestObject struct {
}

type ListFontResponseObject interface {
	VisitListFontResponse(w http.ResponseWriter) error
}

type ListFont200JSONResponse []Font

func (response ListFont200JSONResponse) VisitListFontResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PrintImageRequestObject struct {
	Body *PrintImageJSONRequestBody
}

type PrintImageResponseObject interface {
	VisitPrintImageResponse(w http.ResponseWriter) error
}

type PrintImage202Response struct {
}

func (response PrintImage202Response) VisitPrintImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type PrintImage422Response struct {
}

func (response PrintImage422Response) VisitPrintImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(422)
	return nil
}

type PrintImage503Response struct {
}

func (response PrintImage503Response) VisitPrintImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(503)
	return nil
}

type GetPrinterInfoRequestObject struct {
}

type GetPrinterInfoResponseObject interface {
	VisitGetPrinterInfoResponse(w http.ResponseWriter) error
}

type GetPrinterInfo200JSONResponse DeviceInfo

func (response GetPrinterInfo200JSONResponse) VisitGetPrinterInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPrinterInfo503Response struct {
}

func (response GetPrinterInfo503Response) VisitGetPrinterInfoResponse(w http.ResponseWriter) error {
	w.WriteHeader(503)
	return nil
}

type ListTemplateRequestObject struct {
}

type ListTemplateResponseObject interface {
	VisitListTemplateResponse(w http.ResponseWriter) error
}

type ListTemplate200JSONResponse []Template

func (response ListTemplate200JSONResponse) VisitListTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateTemplateRequestObject struct {
	Body *CreateTemplateJSONRequestBody
}

type CreateTemplateResponseObject interface {
	VisitCreateTemplateResponse(w http.ResponseWriter) error
}

type CreateTemplate201Response struct {
}

func (response CreateTemplate201Response) VisitCreateTemplateResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type CreateTemplate404Response struct {
}

func (response CreateTemplate404Response) VisitCreateTemplateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetTemplateRequestObject struct {
	Id int `json:"id"`
}

type GetTemplateResponseObject interface {
	VisitGetTemplateResponse(w http.ResponseWriter) error
}

type GetTemplate200JSONResponse Template

func (response GetTemplate200JSONResponse) VisitGetTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTemplate404Response struct {
}

func (response GetTemplate404Response) VisitGetTemplateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PrintTemplateRequestObject struct {
	Id   int `json:"id"`
	Body *PrintTemplateJSONRequestBody
}

type PrintTemplateResponseObject interface {
	VisitPrintTemplateResponse(w http.ResponseWriter) error
}

type PrintTemplate202Response struct {
}

func (response PrintTemplate202Response) VisitPrintTemplateResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type PrintTemplate404Response struct {
}

func (response PrintTemplate404Response) VisitPrintTemplateResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PrintTemplate422JSONResponse struct {
	Reason string `json:"reason"`
}

func (response PrintTemplate422JSONResponse) VisitPrintTemplateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type PrintTemplate503Response struct {
}

func (response PrintTemplate503Response) VisitPrintTemplateResponse(w http.ResponseWriter) error {
	w.WriteHeader(503)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List fonts
	// (GET /font)
	ListFont(ctx context.Context, request ListFontRequestObject) (ListFontResponseObject, error)
	// Print an image directly
	// (POST /printer)
	PrintImage(ctx context.Context, request PrintImageRequestObject) (PrintImageResponseObject, error)
	// Get device info
	// (GET /printer/info)
	GetPrinterInfo(ctx context.Context, request GetPrinterInfoRequestObject) (GetPrinterInfoResponseObject, error)
	// List templates
	// (GET /template)
	ListTemplate(ctx context.Context, request ListTemplateRequestObject) (ListTemplateResponseObject, error)
	// Create a new template
	// (POST /template)
	CreateTemplate(ctx context.Context, request CreateTemplateRequestObject) (CreateTemplateResponseObject, error)
	// Get a single template
	// (GET /template/{id})
	GetTemplate(ctx context.Context, request GetTemplateRequestObject) (GetTemplateResponseObject, error)
	// Print a template
	// (POST /template/{id}/print)
	PrintTemplate(ctx context.Context, request PrintTemplateRequestObject) (PrintTemplateResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListFont operation middleware
func (sh *strictHandler) ListFont(w http.ResponseWriter, r *http.Request) {
	var request ListFontRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFont(ctx, request.(ListFontRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFont")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFontResponseObject); ok {
		if err := validResponse.VisitListFontResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PrintImage operation middleware
func (sh *strictHandler) PrintImage(w http.ResponseWriter, r *http.Request) {
	var request PrintImageRequestObject

	var body PrintImageJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PrintImage(ctx, request.(PrintImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PrintImage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PrintImageResponseObject); ok {
		if err := validResponse.VisitPrintImageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPrinterInfo operation middleware
func (sh *strictHandler) GetPrinterInfo(w http.ResponseWriter, r *http.Request) {
	var request GetPrinterInfoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPrinterInfo(ctx, request.(GetPrinterInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPrinterInfo")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPrinterInfoResponseObject); ok {
		if err := validResponse.VisitGetPrinterInfoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTemplate operation middleware
func (sh *strictHandler) ListTemplate(w http.ResponseWriter, r *http.Request) {
	var request ListTemplateRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTemplate(ctx, request.(ListTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTemplateResponseObject); ok {
		if err := validResponse.VisitListTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTemplate operation middleware
func (sh *strictHandler) CreateTemplate(w http.ResponseWriter, r *http.Request) {
	var request CreateTemplateRequestObject

	var body CreateTemplateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTemplate(ctx, request.(CreateTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTemplateResponseObject); ok {
		if err := validResponse.VisitCreateTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTemplate operation middleware
func (sh *strictHandler) GetTemplate(w http.ResponseWriter, r *http.Request, id int) {
	var request GetTemplateRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTemplate(ctx, request.(GetTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTemplateResponseObject); ok {
		if err := validResponse.VisitGetTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PrintTemplate operation middleware
func (sh *strictHandler) PrintTemplate(w http.ResponseWriter, r *http.Request, id int) {
	var request PrintTemplateRequestObject

	request.Id = id

	var body PrintTemplateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PrintTemplate(ctx, request.(PrintTemplateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PrintTemplate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PrintTemplateResponseObject); ok {
		if err := validResponse.VisitPrintTemplateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
