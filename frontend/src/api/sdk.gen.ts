// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ListTemplateData, ListTemplateResponse, ListFontData, ListFontResponse, GetTemplateData, GetTemplateResponse, CreateOrUpdateTemplateData, CreateOrUpdateTemplateResponse, CreateOrUpdateTemplateError, PrintTemplateData, PrintTemplateError, PrintImageData, GetPrinterInfoData, GetPrinterInfoResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
};

/**
 * List templates
 */
export const listTemplate = <ThrowOnError extends boolean = false>(options?: Options<ListTemplateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTemplateResponse, unknown, ThrowOnError>({
        url: '/template',
        ...options
    });
};

/**
 * List fonts
 */
export const listFont = <ThrowOnError extends boolean = false>(options?: Options<ListFontData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFontResponse, unknown, ThrowOnError>({
        url: '/font',
        ...options
    });
};

/**
 * Get a single template
 */
export const getTemplate = <ThrowOnError extends boolean = false>(options: Options<GetTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTemplateResponse, unknown, ThrowOnError>({
        url: '/template/{uuid}',
        ...options
    });
};

/**
 * Create a new template, or update an existing one
 */
export const createOrUpdateTemplate = <ThrowOnError extends boolean = false>(options: Options<CreateOrUpdateTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateOrUpdateTemplateResponse, CreateOrUpdateTemplateError, ThrowOnError>({
        url: '/template/{uuid}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Print a template
 */
export const printTemplate = <ThrowOnError extends boolean = false>(options: Options<PrintTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, PrintTemplateError, ThrowOnError>({
        url: '/template/{uuid}/print',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Print an image directly
 */
export const printImage = <ThrowOnError extends boolean = false>(options: Options<PrintImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/printer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get device info
 */
export const getPrinterInfo = <ThrowOnError extends boolean = false>(options?: Options<GetPrinterInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPrinterInfoResponse, unknown, ThrowOnError>({
        url: '/printer/info',
        ...options
    });
};